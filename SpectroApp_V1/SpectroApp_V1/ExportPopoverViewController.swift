//
//  ExportPopoverViewController.swift
//  SpectroApp_V1
//
//  Created by Corban Swain on 3/16/17.
//  Copyright Â© 2017 CorbanSwain. All rights reserved.
//

import UIKit

extension String {
    func removingWhitespaces() -> String {
        return components(separatedBy: .whitespaces).joined()
    }
}

let docControllerPresenterKey = "docPres"

protocol DocumentControllerPresenter {
    func prepareDocController(withURL url: URL)
    func presentDocController()
}

class ExportPopoverViewController: UIViewController, UIDocumentInteractionControllerDelegate {
    
    @IBOutlet weak var fileNameText: UITextField!
    
    var documentControllerPresenter: DocumentControllerPresenter!
    var documentController : UIDocumentInteractionController!
    
    var project: Project!
    var url: URL!
    
    
    func formatHeader(project: Project, fileName: String) -> String {
        
        // add the labels and data
        let info = "Info," + "Autogenerated from SpectroApp V0.1 - " + fileName + " - on " + Formatter.monDayYrExcel.string(from: Date())
        let title = "Title," + project.title
        let notebookRef = "Notebook Reference," + (project.notebookReference ?? "")
        let creationDate = "Creation Date," + (Formatter.monDayYrExcel.string(fromOptional: project.creationDate) ?? Formatter.noDateStr)
        let editDate = "Edit Date," + (Formatter.monDayYrExcel.string(fromOptional: project.editDate) ?? Formatter.noDateStr)
        let experimentType = "Experiment Type," + project.experimentType.description
        let notes = "Notes," + project.notes
        let creator = "Creator Name," + (project.creator?.firstNameDB ?? "") + " " + (project.creator?.lastNameDB ?? "")
        let username = "Creator Username," + (project.creator?.username ?? "")
        
        let values: [String] = [info, title, notebookRef, creationDate, editDate, experimentType, notes, creator, username]
        let data = values.joined(separator: "\n") + "\n"
        return data
    }
    
    
    func formatData(readings: [Reading]) -> String {
        
        // add the labels
        let labels = ["Reading Time", "Reading Title", "Reading Type", "Average Value", "Std Dev", "Number of Repeats", "Calibration Value", "Calibration Std Dev", "Number of Calibration Repeats"]
        var data = labels.joined(separator: ",") + "\n"
        
        // add the data
        for reading in readings {
            let readingTime = Formatter.monDayYrHrMinExcel.string(fromOptional: reading.timestamp) ?? Formatter.noDateStr
            let readingTitle = reading.title!
            let readingType = reading.type.description
            let averageValue = Formatter.tenDecNum.string(fromOptional: reading.absorbanceValue as NSNumber?) ?? ""
            let stdDev = Formatter.tenDecNum.string(fromOptional: reading.stdDev as NSNumber?) ?? ""
            let numRepeats = String(reading.dataPoints.count)
            let calibrationValue = Formatter.tenDecNum.string(fromOptional: reading.absorbanceValueCalibration as NSNumber?) ?? ""
            let calibrationStdDev = Formatter.tenDecNum.string(fromOptional: reading.stdDevCalibration as NSNumber?) ?? ""
            let calibrationNumRepeats = String(reading.calibrationPoints.count)
    
            let values: [String] = [readingTime, readingTitle, readingType, averageValue, stdDev, numRepeats, calibrationValue, calibrationStdDev, calibrationNumRepeats]
            data.append(values.joined(separator: ",") + "\n")
        }
        return data
    }
    
    
    
    func writeDataToFile(file: String) -> Bool {
        
        let fileName = file + ".csv"

        // format the data for export
        let data = formatHeader(project: project, fileName: fileName) + "\n\n" + formatData(readings: project.readingArray)
        
        // get the file path
        if let dir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first {
            let path = dir.appendingPathComponent(fileName)
            
            documentController = UIDocumentInteractionController(url: path)
            documentControllerPresenter.prepareDocController(withURL: path)
            do {
                print(data)
                try data.write(to: path, atomically: false, encoding: String.Encoding.utf8)
                return true
            }
            catch {
                print("could not write to file")
                return false
            }
            
        }
        return false
    }
    
    @IBAction func cancelButtonPressed(_ sender: UIBarButtonItem) {
        dismiss(animated: true, completion: nil)
    }
    
    @IBAction func writeData(sender: UIButton) {
        if writeDataToFile(file: fileNameText.text!) {
            print("data written")
        } else {
            print("data not written")
        }
        // FIXME: - decide which is better...
        // A.
//        documentController.presentOpenInMenu(from: view.frame, in: view, animated: true)
        // or B.
        dismiss(animated: true, completion: documentControllerPresenter.presentDocController)
        
    }
    
    func RemoveWhiteSpace(string: String) -> String {
        var replaced = ""
        for char in string.characters {
            if char != " " {
                replaced.append(char)
            }
        }
        return replaced
    }
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fileNameText.becomeFirstResponder()
        fileNameText.text = RemoveWhiteSpace(string: project.title)
        
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        let newVC = segue.destination as! MasterViewController
        newVC.instrumentAlertView.isGrayedOut = false
        guard let id = segue.identifier else {
            print("no segue ID")
            return
        }
        print("segueID: \(id)")
    }

}
